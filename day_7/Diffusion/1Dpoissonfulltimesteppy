#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Jul 26 16:00:37 2022

@author: hannahhaider
"""

"Solving exact 1D Heat equation in time and space "

import numpy as np
import matplotlib.pyplot as plt

"defining constants"
"Number of points"
#space
N = 16
Dx = 1/N
x = np.linspace(0,1,N+1)
Nx = len(x)
#time
dt = 1/24
tf = 3
t = np.arange(0,tf,dt)
Nt = len(t)

order = 2

if order<2:
    u = np.zeros((N+1,Nt))
else:
    u = np.zeros((N+2, Nt))

#specifying initial condition
I_C = 0
u0= I_C

#initializing data structures:
#A= (1/Dx**2)*(2*np.diag(np.zeros(N+1)) - np.diag(np.zeros(N)) - np.diag(np.zeros(N))) 

for j in range(Nt-1): #time stepping
   
    if order < 2: #if order is first-order approximation
        "System matrix and RHS term"
        A = (1/Dx**2)*(2*np.diag(np.ones(N+1)) - np.diag(np.ones(N),-1) - np.diag(np.ones(N),1)) #initializing matrix 
        #AC = (1/Dx**2)*(2*np.diag(np.ones(N+2)) - np.diag(np.ones(N+1),-1) - np.diag(np.ones(N+1),1)) #initializing matrix for central difference
        #F = (3*x + x**2)*np.exp(x) #treats all the points as interior points 
        #F = np.concatenate(([0],F, [0])) #my attempt at forcing the boundary conditions
        F = 2*(2*x**2 + 5*x -2)*np.exp(x) #RHS
        #FC = 2*(2*xC**2 + 5*xC -2)*np.exp(xC) #RHS for central difference
        #A[i,j+1] = A[i,j] + (1/dt)*A[i,j]
        
        "temporal terms"
        A = A + (1/dt)*np.diag(np.ones(N+1))
        F = F + u[:,j]/dt
        
        "explicit boundary conditions:"
        #x = 0
        A[0,:] = np.concatenate(([1], np.zeros(N))) #adding row of 1, zeros
        #AC[0,:] = np.concatenate(([1], np.zeros(N+1))) #adding row of 1, zeros for central difference
        #FC[0] = 0
        F[0] = u0
        
        #x = 1
        A[N,:] = np.concatenate((np.zeros(N-1), [-1/Dx], [1/Dx])) #enforcing Neumann Boundary conditions using first order approximation
        F[N] = 0
         
    else: #if the order is second-order approximation
        
        A = (1/Dx)*np.concatenate((np.zeros(N-2), [1/2], [-2], [3/2])) #Neumann boundary condition with 2nd order approximation
        # AC[N+1,:]= (1/(2*Dx))*np.concatenate((np.zeros(N-1),[-1,0,1])) #centered difference approximation of the derivative 
        #FC[N+1]=0 #central RHS BC forced
        F = 2*(2*x**2 + 5*x -2)*np.exp(x) #RHS
        
        
        "temporal terms"
        A = A + (1/dt)*np.diag(np.ones(N+1))
        F = F + u[:,j]/dt
        
        "explicit boundary conditions:"
        #x = 0
        A[0,:] = np.concatenate(([1], np.zeros(N))) #adding row of 1, zeros
        #AC[0,:] = np.concatenate(([1], np.zeros(N+1))) #adding row of 1, zeros for central difference
        #FC[0] = 0
        F[0] = u0
        
        A[N,:] = (1/Dx)*np.concatenate((np.zeros(N-2), [1/2], [-2], [3/2])) #Neumann boundary condition with 2nd order approximatio
        F[N] = u0 

"Solution of the linear system AU=F"
u = u[0:N+1] #solution vector for 1st and 2nd order approx
#UC= np.linalg.solve(AC, FC) #solution vector for central diff
#ua = -x*(x-1)*np.exp(x)
ua = 2*x*(3-2*x)*np.exp(x) 
#uac = 2*xC*(3-2*xC)*np.exp(xC)
    

"Plotting solution"
plt.plot(x,ua,'-r',linewidth=2,label='$u_a$')
plt.plot(x,u,':ob',linewidth=2,label='$\widehat{u}$')
#plt.plot(xC, UC, ':og', linewidth = 2, label = '$\widehat{u}$ central')
plt.legend(fontsize=12,loc='upper left')
plt.grid()
plt.axis([0,1,0, 6])
plt.xlabel("x",fontsize=16)
plt.ylabel("u",fontsize=16)

"Compute error"
#error_c = np.max(np.abs(UC-uac)) #computing central error
error = np.max(np.abs(u-ua)) #computing error between first/second and solution
print("Linf error u: %g\n" % error)
#print("Central error u: %g\n" % error_c)

    
    
    
    